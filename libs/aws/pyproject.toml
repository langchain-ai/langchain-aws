[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
authors = []
license = {text = "MIT"}
requires-python = ">=3.10"
dependencies = [
    "langchain-core>=1.0.0a4",
    "boto3>=1.40.19",
    "pydantic>=2.11.7,<3",
    "numpy>=2.3.2,<3; python_version>='3.12'",
    "numpy>=1.0.0,<3; python_version<'3.12'",
]
name = "langchain-aws"
version = "1.0.0a1"
description = "An integration package connecting AWS and LangChain"
readme = "README.md"

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain-aws/tree/main/libs/aws"
repository = "https://github.com/langchain-ai/langchain-aws"

[project.optional-dependencies]
tools = ["bedrock-agentcore>=0.1.0; python_version>='3.10'", "playwright>=1.53.0", "beautifulsoup4>=4.13.4"]

[dependency-groups]
test = [
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "syrupy>=4.9.1",
    "pytest-asyncio>=0.20,<1",
    "pytest-watcher>=0.4.3",
    "langchain-tests>=0.3.20",
    "langchain>=1.0.0a9",
]
test_integration = []
lint = ["ruff>=0.13.0"]
typing = [
    "mypy>=1.17.1",
    "types-requests>=2.32.0; platform_python_implementation != 'PyPy'",
    "types-requests>=2.31.0,<2.32.0; platform_python_implementation == 'PyPy'",
]
dev = [
    "boto3-stubs[essential]>=1.40.19",
    "botocore-stubs>=1.38.46",
]


[tool.ruff.lint]
select = [
    "E",    # pycodestyle
    "F",    # pyflakes
    "I",    # isort
    "T201", # print
]

[tool.mypy]
ignore_missing_imports = "True"
disallow_untyped_defs = "True"
exclude = ["notebooks", "samples"]

[tool.coverage.run]
source = ["langchain_aws"]
omit = [
    "tests/*",
    "*/tests/*",
    "test_*",
    "*_test.py"
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"


[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
# --snapshot-warn-unused    Prints a warning on unused snapshots rather than fail the test suite.
addopts = "--snapshot-warn-unused --strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
    "requires: mark tests as requiring a specific library",
    "asyncio: mark tests as requiring asyncio",
    "compile: mark placeholder test used to compile integration tests without running them",
    "scheduled: mark tests to run in scheduled testing",
]
asyncio_mode = "auto"
