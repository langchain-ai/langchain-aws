# Guides

- [LangChain AWS Integration Documentation](https://python.langchain.com/docs/integrations/platforms/aws/): Comprehensive guide covering all AWS integrations with LangChain, including chat models, LLMs, embeddings, retrievers, and vector stores. This page provides installation instructions, usage examples, and detailed configuration options for Amazon Bedrock, SageMaker, Kendra, Neptune, and other AWS services.
- [Amazon Bedrock Chat Models](https://python.langchain.com/docs/integrations/chat/bedrock/): This guide explains how to use Amazon Bedrock foundation models through the ChatBedrock interface. It covers model initialization, parameter configuration, streaming responses, and tool calling capabilities. Includes examples for Anthropic Claude, AI21 Jurassic, Cohere Command, Meta Llama, and Amazon Titan models.
- [Amazon Bedrock LLMs](https://python.langchain.com/docs/integrations/llms/bedrock/): Documentation for using Amazon Bedrock language models with the BedrockLLM class. Covers model selection, parameter tuning, credential configuration, and integration with LangChain applications. Includes examples for various foundation models available through Bedrock.
- [Amazon Bedrock Embeddings](https://python.langchain.com/docs/integrations/text_embedding/bedrock/): Guide for implementing text embeddings using Amazon Bedrock embedding models. Covers the BedrockEmbeddings class, model configuration, batch processing, and integration with vector stores. Includes examples using Amazon Titan and Cohere embedding models.
- [Amazon SageMaker Endpoints](https://python.langchain.com/docs/integrations/llms/sagemaker/): Instructions for deploying and using custom models on Amazon SageMaker endpoints with LangChain. Covers endpoint configuration, content handlers, custom model deployment, and real-time inference setup.
- [Amazon Kendra Retriever](https://python.langchain.com/docs/integrations/retrievers/amazon_kendra_retriever/): Documentation for integrating Amazon Kendra enterprise search with LangChain applications. Covers index setup, query configuration, document retrieval, and filtering options. Includes examples for building RAG applications with Kendra as the knowledge base.
- [Amazon Bedrock Knowledge Bases Retriever](https://python.langchain.com/docs/integrations/retrievers/bedrock/): Guide for using Amazon Bedrock Knowledge Bases as a retriever in RAG applications. Covers knowledge base setup, retrieval configuration, vector search parameters, and integration with Bedrock foundation models.
- [Amazon Neptune Graph Database](https://python.langchain.com/docs/integrations/graphs/neptune_cypher/): Documentation for working with Amazon Neptune graph databases using Cypher queries. Covers graph connection setup, query execution, and integration with LangChain graph capabilities for knowledge graphs and graph-based AI applications.
- [Amazon Neptune Analytics](https://python.langchain.com/docs/integrations/graphs/neptune_cypher/): Guide for using Amazon Neptune Analytics for serverless graph analytics. Covers graph identifier configuration, query optimization, and integration with graph-based AI workflows.

# Examples

- [Amazon Bedrock Chat Example](https://github.com/langchain-ai/langchain-aws/blob/main/libs/aws/langchain_aws/chat_models/bedrock.py): Source code example showing how to implement and use the ChatBedrock class for conversational AI applications. Demonstrates parameter configuration, streaming responses, and tool calling capabilities with various foundation models.
- [Amazon Bedrock LLM Example](https://github.com/langchain-ai/langchain-aws/blob/main/libs/aws/langchain_aws/llms/bedrock.py): Implementation example of the BedrockLLM class showing model initialization, parameter configuration, and integration with LangChain workflows. Includes examples for different foundation models and use cases.
- [Amazon Bedrock Embeddings Example](https://github.com/langchain-ai/langchain-aws/blob/main/libs/aws/langchain_aws/embeddings/bedrock.py): Source code demonstrating how to use BedrockEmbeddings for text embedding generation. Shows model configuration, batch processing, and integration with vector stores and retrieval systems.
- [Amazon Kendra Retriever Example](https://github.com/langchain-ai/langchain-aws/blob/main/libs/aws/langchain_aws/retrievers/kendra.py): Implementation example of the AmazonKendraRetriever class showing how to set up enterprise search capabilities. Demonstrates index configuration, query processing, and document retrieval for RAG applications.
- [Amazon Knowledge Bases Retriever Example](https://github.com/langchain-ai/langchain-aws/blob/main/libs/aws/langchain_aws/retrievers/bedrock.py): Source code example for the AmazonKnowledgeBasesRetriever class. Shows configuration of vector search parameters, knowledge base integration, and retrieval optimization for Bedrock-based RAG systems.
- [Amazon SageMaker Endpoint Example](https://github.com/langchain-ai/langchain-aws/blob/main/libs/aws/langchain_aws/llms/sagemaker_endpoint.py): Implementation example showing how to deploy and use custom models on SageMaker endpoints. Demonstrates content handler configuration, endpoint management, and real-time inference integration.
- [Amazon Neptune Graph Example](https://github.com/langchain-ai/langchain-aws/blob/main/libs/aws/langchain_aws/graphs/neptune_graph.py): Source code example for working with Neptune graph databases. Shows graph connection setup, Cypher query execution, and integration with graph-based AI applications.

# Resources

- [LangChain AWS GitHub Repository](https://github.com/langchain-ai/langchain-aws): Official repository for the langchain-aws package containing source code, documentation, and examples. Includes installation instructions, contribution guidelines, and issue tracking for AWS integrations with LangChain.
- [LangChain AWS PyPI Package](https://pypi.org/project/langchain-aws/): Official Python package for installing langchain-aws. Contains version history, dependency information, and installation instructions for integrating AWS services with LangChain applications.
- [Amazon Bedrock Documentation](https://docs.aws.amazon.com/bedrock/): Official AWS documentation for Amazon Bedrock foundation models. Covers model capabilities, API reference, pricing, and best practices for using foundation models from various providers including Anthropic, AI21 Labs, Cohere, Meta, and Amazon.
- [Amazon SageMaker Documentation](https://docs.aws.amazon.com/sagemaker/): Comprehensive documentation for Amazon SageMaker machine learning platform. Includes guides for model training, deployment, endpoint management, and integration with custom ML workflows.
- [Amazon Kendra Documentation](https://docs.aws.amazon.com/kendra/): Official documentation for Amazon Kendra enterprise search service. Covers index creation, data source connectors, search configuration, and enterprise search best practices.
- [Amazon Neptune Documentation](https://docs.aws.amazon.com/neptune/): Documentation for Amazon Neptune graph database service. Includes guides for graph creation, query languages (Gremlin and SPARQL), performance optimization, and graph analytics capabilities.